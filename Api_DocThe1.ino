#include <WiFi.h>
#include <HTTPClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <ArduinoJson.h>

#define SS_PIN 5    // SDA n·ªëi D5
#define RST_PIN 22  // RST n·ªëi D22

const char* ssid = "WIFI 201";
const char* password = "88888888";
const char* serverUrl = "http://192.168.0.112:5250/api/HocSinh/info/rfid/";
const char* phanCongUrl = "http://192.168.0.112:5250/api/phancong/current";

WiFiClient client;
MFRC522 mfrc522(SS_PIN, RST_PIN);

String maPhanCong = ""; // Kh·ªüi t·∫°o r·ªóng

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);

    Serial.println("üîÑ ƒêang k·∫øt n·ªëi WiFi...");
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");
    Serial.print("üì° ƒê·ªãa ch·ªâ IP: ");
    Serial.println(WiFi.localIP());

    SPI.begin();
    mfrc522.PCD_Init();
    Serial.println("üéØ H·ªá th·ªëng s·∫µn s√†ng qu√©t th·∫ª RFID...");
    Serial.println("ƒêang ch·ªù m√£ ph√¢n c√¥ng t·ª´ server...");
}

void loop() {
    // Ki·ªÉm tra th·∫ª RFID
    if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
        return;
    }

    // L·∫•y maPhanCong m·ªõi nh·∫•t t·ª´ server tr∆∞·ªõc khi qu·∫πt th·∫ª
    fetchMaPhanCong();

    if (maPhanCong == "") {
        Serial.println("‚õî Ch∆∞a nh·∫≠n ƒë∆∞·ª£c m√£ ph√¢n c√¥ng t·ª´ server!");
        delay(3000);
        return;
    }

    String uid = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
        uid += String(mfrc522.uid.uidByte[i], HEX);
    }
    uid.toUpperCase();

    Serial.print("üì° UID ƒê·ªçc ƒë∆∞·ª£c: ");
    Serial.println(uid);
    Serial.print("üìã M√£ ph√¢n c√¥ng hi·ªán t·∫°i: ");
    Serial.println(maPhanCong);

    getHocSinhInfo(uid);

    delay(1000); // Tr√°nh ƒë·ªçc li√™n t·ª•c
}

void fetchMaPhanCong() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚õî WiFi b·ªã m·∫•t k·∫øt n·ªëi!");
        return;
    }

    HTTPClient http;
    http.begin(client, phanCongUrl);
    http.addHeader("Accept", "*/*");

    int httpCode = http.GET();
    Serial.print("üîç M√£ l·ªói HTTP: ");
    Serial.println(httpCode);

    if (httpCode == 200) {
        String response = http.getString();
        Serial.print("üîç Ph·∫£n h·ªìi t·ª´ server: ");
        Serial.println(response);

        StaticJsonDocument<200> doc;
        DeserializationError error = deserializeJson(doc, response);
        if (!error && doc.containsKey("maPhanCong")) {
            maPhanCong = doc["maPhanCong"].as<String>();
            Serial.print("‚úÖ Nh·∫≠n m√£ ph√¢n c√¥ng t·ª´ server: ");
            Serial.println(maPhanCong);
        } else {
            Serial.println("‚õî L·ªói ph√¢n t√≠ch JSON ho·∫∑c kh√¥ng c√≥ maPhanCong!");
            if (error) {
                Serial.print("üîç L·ªói JSON: ");
                Serial.println(error.c_str());
            }
            maPhanCong = ""; // ƒê·∫∑t l·∫°i r·ªóng n·∫øu c√≥ l·ªói
        }
    } else {
        Serial.print("‚õî L·ªói l·∫•y maPhanCong! M√£ l·ªói: ");
        Serial.println(httpCode);
        maPhanCong = ""; // ƒê·∫∑t l·∫°i r·ªóng n·∫øu server l·ªói
    }
    http.end();
}

void getHocSinhInfo(String uid) {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚õî WiFi b·ªã m·∫•t k·∫øt n·ªëi!");
        return;
    }

    HTTPClient http;
    String fullUrl = String(serverUrl) + uid + "?maPhanCong=" + maPhanCong;

    Serial.print("üîó G·ª≠i y√™u c·∫ßu ƒë·∫øn: ");
    Serial.println(fullUrl);

    http.begin(client, fullUrl);
    http.addHeader("Accept", "*/*");

    int httpCode = http.GET();
    Serial.print("üîç M√£ l·ªói HTTP: ");
    Serial.println(httpCode);

    if (httpCode == 200) {
        String response = http.getString();
        Serial.println("‚úÖ Nh·∫≠n th√¥ng tin h·ªçc sinh v√† ƒëi·ªÉm danh:");
        Serial.println(response);
        printHocSinhInfo(response);
    } else {
        Serial.println("‚õî L·ªói l·∫•y th√¥ng tin! M√£ l·ªói: " + String(httpCode));
        if (httpCode == 404) {
            Serial.println("‚õî Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi UID n√†y!");
        } else if (httpCode == 400) {
            String response = http.getString();
            Serial.println("‚õî L·ªói y√™u c·∫ßu: " + response);
        }
    }
    http.end();
}

void printHocSinhInfo(String jsonString) {
    StaticJsonDocument<512> doc;
    DeserializationError error = deserializeJson(doc, jsonString);
    if (error) {
        Serial.println("‚õî L·ªói ph√¢n t√≠ch c√∫ ph√°p JSON!");
        return;
    }

    if (!doc["success"].as<bool>()) {
        Serial.println("‚õî " + doc["message"].as<String>());
        return;
    }

    JsonObject data = doc["data"];
    Serial.println("=== Th√¥ng tin h·ªçc sinh ===");
    Serial.print("M√£ h·ªçc sinh: "); Serial.println(data["maHocSinh"].as<String>());
    Serial.print("RFID UID: "); Serial.println(data["rfiD_UID"].as<String>());
    Serial.print("H·ªç t√™n: "); Serial.println(data["hoTen"].as<String>());
    Serial.print("Ng√†y sinh: "); Serial.println(data["ngaySinh"].as<String>());
    Serial.print("Gi·ªõi t√≠nh: "); Serial.println(data["gioiTinh"].as<String>());
    Serial.print("M√£ l·ªõp: "); Serial.println(data["maLop"].as<String>());
    Serial.println("========================");
}